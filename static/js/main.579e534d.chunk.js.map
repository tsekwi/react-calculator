{"version":3,"sources":["Button.module.css","calc-symbols.js","math-expression-parser.js","Button.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","calcSymbols","split","expression","operator","result","braces","currentChunk","i","length","curCh","push","parseDivideSeparatedExpression","numbers","map","noStr","expr","substr","parsePlusSeparatedExpression","reduce","acc","no","parseMultiplicationSeparatedExpression","initialValue","slice","parseMinusSeparatedExpression","Button","num","value","change","classy","idx","type","id","onClick","e","undefined","target","className","styles","button","submit","App","useState","setValue","handleChange","newValue","onSubmit","preventDefault","replace","String","placeholder","onChange","keys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,yB,4JCC5CC,EAFK,CAAC,IAAI,IAAI,IAAI,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,OAAI,OAAI,IAAI,KCCxEC,EAAQ,SAACC,EAAYC,GAIzB,IAHA,IAAMC,EAAS,GACXC,EAAS,EACTC,EAAe,GACVC,EAAI,EAAGA,EAAIL,EAAWM,SAAUD,EAAG,CACxC,IAAME,EAAQP,EAAWK,GACX,MAAVE,EACAJ,IACiB,MAAVI,GACPJ,IAEW,IAAXA,GAAgBF,IAAaM,GAC7BL,EAAOM,KAAKJ,GACZA,EAAe,IACZA,GAAgBG,EAK3B,MAHqB,KAAjBH,GACAF,EAAOM,KAAKJ,GAETF,GAoBHO,EAAiC,SAACT,GACtC,IACMU,EADgBX,EAAMC,EAAY,KACVW,KAAI,SAAAC,GAAK,OAlBM,SAACZ,GAY9C,OAXsBD,EAAMC,EAAY,KACVW,KAAI,SAAAC,GAC9B,GAAiB,MAAbA,EAAM,GAAY,CAClB,IAAMC,EAAOD,EAAME,OAAO,EAAGF,EAAMN,OAAS,GAE5C,OAAOS,EAA6BF,GAExC,OAAQD,KAGWI,QAAO,SAACC,EAAKC,GAAN,OAAaD,EAAMC,IAD5B,GAQsBC,CAAuCP,MAC7DF,EAAQ,GAG7B,OAFeA,EAAQM,QAAO,SAACC,EAAKC,GAAN,OAAaD,EAAMC,MAe7CH,EAA+B,SAACf,GACpC,IACMU,EADgBX,EAAMC,EAAY,KACVW,KAAI,SAAAC,GAAK,OAXH,SAACZ,GACrC,IACMU,EADgBX,EAAMC,EAAY,KACVW,KAAI,SAAAC,GAAK,OAAIH,EAA+BG,MACpEQ,EAAeV,EAAQ,GAE7B,OADeA,EAAQW,MAAM,GAAGL,QAAO,SAACC,EAAKC,GAAN,OAAaD,EAAMC,IAAIE,GAOnBE,CAA8BV,MAGzE,OADeF,EAAQM,QAAO,SAACC,EAAKC,GAAN,OAAaD,EAAMC,IAD5B,IAKRH,I,gBClCAQ,EA/BA,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,IAAKC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,IAe1C,MAAY,MAARJ,EAEI,wBACAK,KAAK,SACLC,GAAKN,EACLC,MAAQD,EACRO,QApBa,SAAAC,GACjB,OAAQR,GACJ,IAAK,IACDE,EAAO,IACP,MACJ,IAAK,KACDA,EAAOD,EAAMJ,MAAM,GAAG,IACtB,MACJ,aAC2BY,IAAnBD,EAAEE,OAAOT,OACbC,EAAOD,EAAQO,EAAEE,OAAOT,SAW5BU,UAAYC,IAAOC,OAAP,WAAoBV,EAApB,gBALZ,SAK8EH,GAAjBG,EAASC,GAK1E,wBAAQO,UAAYC,IAAOC,OAAP,gBAAkCD,IAAOE,OAAST,KAAK,SAA3E,cAA0F,SAAWD,ICgC9FW,G,YAtDH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTf,EADS,KACFgB,EADE,KAQVC,EAAe,SAAAC,GAAQ,OAAIF,GAAS,kBAAME,MAEhD,OACE,uBAAMC,SATa,SAAAZ,GACnBA,EAAEa,iBACF,IAAM3C,EAASa,EAA6BU,EAAMqB,QAAQ,QAAM,KAAKA,QAAQ,QAAM,KAAM,KACzFL,EAASM,OAAO7C,KAMhB,UACE,uBAAO2B,KAAK,OAAOmB,YAAY,uBAAuBvB,MAAQA,EAAQwB,SALtD,SAAAjB,GAAC,OAAIS,EAAST,EAAEE,OAAOT,UAMvC,sBAAKU,UAAU,gBAAf,UACE,8BACI,qBAAKA,UAAU,SAAf,SAEIrC,EAAYa,KAAI,SAACa,EAAKI,GACpB,OAAIA,EAAM,EACH,cAAC,EAAD,CAAQJ,IAAMA,EAAMC,MAAQA,EAAQC,OAASgB,EAAef,OAAO,UAAUuB,KAAO1B,IAC/E,UAKtB,sBAAKW,UAAU,iBAAf,UACE,8BACE,qBAAKA,UAAU,SAAf,SAEIrC,EAAYa,KAAI,SAACa,EAAKI,GACpB,OAAIA,EAAM,GAAKA,EAAM,GACd,cAAC,EAAD,CAAQJ,IAAMA,EAAMC,MAAQA,EAAQC,OAASgB,EAAef,OAAO,UAAUuB,KAAO1B,IAC/E,SANX,aAWT,8BACE,qBAAKW,UAAU,SAAf,SAEIrC,EAAYa,KAAI,SAACa,EAAKI,GACpB,OAAIA,EAAM,IAAMA,EAAM,GACf,cAAC,EAAD,CAAQJ,IAAMA,EAAMC,MAAQA,EAAQC,OAASgB,EAAef,OAAO,UAAUuB,KAAO1B,IAC/E,kBAhCU,cCNzB2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.579e534d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1DqCU\",\"submit\":\"Button_submit__1vkTD\"};","const calcSymbols = ['(',')','C','CE',7,8,9,4,5,6,1,2,3,0,'.','=','÷','×','-','+'];\n\nexport default calcSymbols;","// split expression by operator considering parentheses\nconst split = (expression, operator) => {\n  const result = [];\n  let braces = 0;\n  let currentChunk = \"\";\n  for (let i = 0; i < expression.length; ++i) {\n      const curCh = expression[i];\n      if (curCh === '(') {\n          braces++;\n      } else if (curCh === ')') {\n          braces--;\n      }\n      if (braces === 0 && operator === curCh) {\n          result.push(currentChunk);\n          currentChunk = \"\";\n      } else currentChunk += curCh;\n  }\n  if (currentChunk !== \"\") {\n      result.push(currentChunk);\n  }\n  return result;\n};\n  \n// this will only take strings containing * operator [ no + ]\nconst parseMultiplicationSeparatedExpression = (expression) => {\n  const numbersString = split(expression, '*');\n  const numbers = numbersString.map(noStr => {\n      if (noStr[0] === '(') {\n          const expr = noStr.substr(1, noStr.length - 2);\n          // recursive call to the main function\n          return parsePlusSeparatedExpression(expr);\n      }\n      return +noStr;\n  });\n  const initialValue = 1.0;\n  const result = numbers.reduce((acc, no) => acc * no, initialValue);\n  return result;\n};\n  \n// this will only take strings containing / operator [ no + ]\nconst parseDivideSeparatedExpression = (expression) => {\n  const numbersString = split(expression, '/');\n  const numbers = numbersString.map(noStr => parseMultiplicationSeparatedExpression(noStr));\n  const initialValue = numbers[0];\n  const result = numbers.reduce((acc, no) => acc / no);\n\n  return result;\n};\n  \n// * / -\nconst parseMinusSeparatedExpression = (expression) => {\n  const numbersString = split(expression, '-');\n  const numbers = numbersString.map(noStr => parseDivideSeparatedExpression(noStr));\n  const initialValue = numbers[0];\n  const result = numbers.slice(1).reduce((acc, no) => acc - no, initialValue);\n  return result;\n};\n  \n// * / - + \nconst parsePlusSeparatedExpression = (expression) => {\n  const numbersString = split(expression, '+');\n  const numbers = numbersString.map(noStr => parseMinusSeparatedExpression(noStr));\n  const initialValue = 0.0;\n  const result = numbers.reduce((acc, no) => acc + no, initialValue);\n  return result;\n};\n\nexport default parsePlusSeparatedExpression;","import styles from './Button.module.css';\n\nconst Button = ({ num, value, change, classy, idx }) => {\n    const handleChange = e => {\n        switch (num) {\n            case 'C':\n                change('');\n                break;\n            case 'CE':\n                change(value.slice(0,-1));\n                break;\n            default:\n                if (e.target.value !== undefined) \n                change(value + e.target.value);\n                break;\n        }\n    }\n    if (num !== '=') {\n        return (\n            <button \n            type=\"button\" \n            id={ num } \n            value={ num } \n            onClick={ handleChange } \n            className={ styles.button + ` ${classy} text-center` } key={ classy + idx }>{ num }</button>\n        );\n    } \n    else \n    return (\n        <button className={ styles.button + ` text-center ` + styles.submit } type=\"submit\" key={ 'group_' + idx }>=</button>\n    );\n}\n\nexport default Button;","import { useState } from \"react\";\nimport calcSymbols from './calc-symbols';\nimport parsePlusSeparatedExpression from './math-expression-parser';\nimport Button from './Button';\nimport './foundation.min.css';\nimport './style.scss';\n\nconst App = () => {\n  const [value, setValue] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    const result = parsePlusSeparatedExpression(value.replace(/×/g, '*').replace(/÷/g, '/'), '+');\n    setValue(String(result));\n  }\n  const updateState = e => setValue(e.target.value);\n  const handleChange = newValue => setValue(() => newValue);\n\n  return (\n    <form onSubmit={ handleSubmit } key=\"parent_1\">\n      <input type=\"text\" placeholder=\"Start Calculating...\" value={ value } onChange={ updateState } />\n      <div className=\"btn-container\">\n        <div>\n            <div className=\"grid-4\">\n              {\n                calcSymbols.map((num, idx) => {\n                  if (idx < 4) \n                  return <Button num={ num } value={ value } change={ handleChange } classy=\"group_1\" keys={ num } /> \n                  else return \"\"\n                })\n              }\n            </div>\n        </div>\n        <div className=\"grid-container\">\n          <div key=\"child_3-2\">\n            <div className=\"grid-3\">\n              {\n                calcSymbols.map((num, idx) => {\n                  if (idx > 3 && idx < 16) \n                  return <Button num={ num } value={ value } change={ handleChange } classy=\"group_2\" keys={ num } /> \n                  else return \"\"\n                })\n              }\n            </div>\n          </div>\n          <div>\n            <div className=\"grid-1\">\n              {\n                calcSymbols.map((num, idx) => {\n                  if (idx > 15 && idx < 20) \n                  return <Button num={ num } value={ value } change={ handleChange } classy=\"group_3\" keys={ num } /> \n                  else return \"\"\n                })\n              }\n            </div>\n          </div> \n        </div>\n      </div>\n    </form>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}